<?php   
class ControllerCommonHome extends Controller {   
	public function index(){
   	$this->load->language('common/home');

		$this->data['token'] = $this->session->data['token'];

		$this->load->model('sale/order');

    /*****
    # total statistics
    $aOrderToday = $this->model_sale_order->getTotalOrderToday();
    $this->log->aPrint( $aOrderToday ); exit;
    $this->data['order_today'] = $this->currency->format($aOrderToday['total'], $this->config->get('config_currency'));
    $this->data['payed_today'] = $this->currency->format($aOrderToday['payed'], $this->config->get('config_currency'));
    $this->data['balance_today'] = $this->currency->format($aOrderToday['balance'], $this->config->get('config_currency'));
    
    $aOrderYesterday = $this->model_sale_order->getTotalOrderYday();
    $this->data['order_yesterday'] = $this->currency->format($aOrderYesterday['total'], $this->config->get('config_currency'));
    $this->data['payed_yesterday'] = $this->currency->format($aOrderYesterday['payed'], $this->config->get('config_currency'));
    $this->data['balance_yesterday'] = $this->currency->format($aOrderYesterday['balance'], $this->config->get('config_currency'));
    
    $aOrderThisMonth = $this->model_sale_order->getTotalOrderThisMonth();
    $this->data['this_month'] = $aOrderThisMonth['thismonth']; 
    $this->data['order_this_month'] = $this->currency->format($aOrderThisMonth['total'],$this->config->get('config_currency'));
    $this->data['payed_this_month'] = $this->currency->format($aOrderThisMonth['payed'],$this->config->get('config_currency'));
    $this->data['balance_this_month'] = $this->currency->format($aOrderThisMonth['balance'],$this->config->get('config_currency'));
    
    $aOrderLastMonth = $this->model_sale_order->getTotalOrderLastMonth();
    $this->data['last_month'] = $aOrderLastMonth['lastmonth'];
    $this->data['order_last_month'] = $this->currency->format($aOrderLastMonth['total'],$this->config->get('config_currency'));
    $this->data['payed_last_month'] = $this->currency->format($aOrderLastMonth['payed'],$this->config->get('config_currency'));
    $this->data['balance_last_month'] = $this->currency->format($aOrderLastMonth['balance'],$this->config->get('config_currency'));
    
    #individual statistics
    $groupId = $this->user->getGroupID();
    $user = $this->user->getUserName();
    if('11' == $groupId){
      $aOrderToday_u = $this->model_sale_order->getTotalOrderToday($user);
      $this->data['order_today_u'] = $this->currency->format($aOrderToday_u['total'], $this->config->get('config_currency'));
      $this->data['payed_today_u'] = $this->currency->format($aOrderToday_u['payed'], $this->config->get('config_currency'));
      $this->data['balance_today_u'] = $this->currency->format($aOrderToday_u['balance'], $this->config->get('config_currency'));
      
      $aOrderYesterday_u = $this->model_sale_order->getTotalOrderYday($user);
      $this->data['order_yesterday_u'] = $this->currency->format($aOrderYesterday_u['total'], $this->config->get('config_currency'));
      $this->data['payed_yesterday_u'] = $this->currency->format($aOrderYesterday_u['payed'], $this->config->get('config_currency'));
      $this->data['balance_yesterday_u'] = $this->currency->format($aOrderYesterday_u['balance'], $this->config->get('config_currency'));
      
      
      $aOrderThisMonth_u = $this->model_sale_order->getTotalOrderThisMonth($user);
      $this->data['this_month_u'] = $aOrderThisMonth['thismonth']; 
      $this->data['order_this_month_u'] = $this->currency->format($aOrderThisMonth_u['total'],$this->config->get('config_currency'));
      $this->data['payed_this_month_u'] = $this->currency->format($aOrderThisMonth_u['payed'],$this->config->get('config_currency'));
      $this->data['balance_this_month_u'] = $this->currency->format($aOrderThisMonth_u['balance'],$this->config->get('config_currency'));
      
      $aOrderLastMonth_u = $this->model_sale_order->getTotalOrderLastMonth($user);
      $this->data['last_month_u'] = $aOrderLastMonth['lastmonth'];
      $this->data['order_last_month_u'] = $this->currency->format($aOrderLastMonth_u['total'],$this->config->get('config_currency'));
      $this->data['payed_last_month_u'] = $this->currency->format($aOrderLastMonth_u['payed'],$this->config->get('config_currency'));
      $this->data['balance_last_month_u'] = $this->currency->format($aOrderLastMonth_u['balance'],$this->config->get('config_currency'));
    }
    
    
		$this->data['total_sale'] = $this->currency->format($this->model_sale_order->getTotalSales(), $this->config->get('config_currency'));
		$this->data['total_sale_year'] = $this->currency->format($this->model_sale_order->getTotalSalesByYear(date('Y')), $this->config->get('config_currency'));
		$this->data['total_order'] = $this->model_sale_order->getTotalOrders();
		
		$this->load->model('sale/customer');
		
		$this->data['total_customer'] = $this->model_sale_customer->getTotalCustomers();
		$this->data['total_customer_approval'] = $this->model_sale_customer->getTotalCustomersAwaitingApproval();
		
		$this->load->model('catalog/product');
		
		$this->data['total_product'] = $this->model_catalog_product->getTotalProducts();
		
		$this->load->model('catalog/review');
		
		$this->data['total_review'] = $this->model_catalog_review->getTotalReviews();
		$this->data['total_review_approval'] = $this->model_catalog_review->getTotalReviewsAwaitingApproval();
		
		$this->data['orders'] = array(); 
		
		$data = array(
			'sort'  => 'o.date_added',
			'order' => 'DESC',
			'start' => 0,
			'limit' => 10
		);
		
		$results = $this->model_sale_order->getOrders($data);
		***/
		
    /***
    foreach ($results as $result){
			$action = array();
			 
			$action[] = array(
				'text' => $this->language->get('text_edit'),
				'href' => HTTPS_SERVER . 'index.php?route=sale/order/update&token=' . $this->session->data['token'] . '&order_id=' . $result['order_id']
			);
					
			$this->data['orders'][] = array(
				'order_id'   => $result['order_id'],
				'name'       => $result['name'],
				'status'     => $result['status'],
				'date_added' => date($this->language->get('date_format_short'), strtotime($result['date_added'])),
				'total'      => $this->currency->format($result['total'], $result['currency'], $result['value']),
				'action'     => $action
			);
		}
    ****/
    
    /**
		if ($this->config->get('config_currency_auto')){
			$this->load->model('localisation/currency');
		
			$this->model_localisation_currency->updateCurrencies();
		}
		***/
		
		$this->template = 'common/home.tpl';
		$this->children = array(
			'common/header',	
			'common/footer'	
		);
		
		$this->response->setOutput($this->render(TRUE), $this->config->get('config_compression'));
  }
	
	public function chart(){
		$this->load->language('common/home');
		
		$data = array();
		
		$data['order'] = array();
		$data['customer'] = array();
		$data['xaxis'] = array();
		
		$data['order']['label'] = $this->language->get('text_order');
		$data['customer']['label'] = $this->language->get('text_customer');
		
		if (isset($this->request->get['range'])){
			$range = $this->request->get['range'];
		}else{
			$range = 'month';
		}
		
		switch($range){
			case 'day':
				for ($i = 0; $i < 24; $i++){
				  $sql = "SELECT COUNT(*) AS total FROM transaction ";
				  $sql.= " where shipped_yn = 'Y' AND (DATE(order_date) = DATE(NOW()) AND HOUR(order_date) = '" . (int)$i . "') GROUP BY HOUR(order_date) ORDER BY order_date ASC";
					$query = $this->db->query($sql);
					//$this->log->aPrint( $sql );
					if ($query->num_rows){
						$data['order']['data'][]  = array($i, (int)$query->row['total']);
					}else{
						$data['order']['data'][]  = array($i, 0);
					}
					
					$query = $this->db->query("SELECT COUNT(*) AS total FROM user WHERE DATE(date_added) = DATE(NOW()) AND HOUR(date_added) = '" . (int)$i . "' GROUP BY HOUR(date_added) ORDER BY date_added ASC");
					
					if ($query->num_rows){
						$data['customer']['data'][] = array($i, (int)$query->row['total']);
					}else{
						$data['customer']['data'][] = array($i, 0);
					}
			
					$data['xaxis'][] = array($i, date('H', mktime($i, 0, 0, date('n'), date('j'), date('Y'))));
				}					
				break;
			case 'week':
				$date_start = strtotime('-' . date('w') . ' days'); 
				for ($i = 0; $i < 7; $i++){
					$date = date('Y-m-d', $date_start + ($i * 86400));
					$query = $this->db->query("SELECT COUNT(*) AS total FROM transaction WHERE shipped_yn = 'Y' AND DATE(order_date) = '" . $this->db->escape($date) . "' GROUP BY DATE(order_date)");
					if ($query->num_rows){
						$data['order']['data'][] = array($i, (int)$query->row['total']);
					}else{
						$data['order']['data'][] = array($i, 0);
					}
					$query = $this->db->query("SELECT COUNT(*) AS total FROM user WHERE DATE(date_added) = '" . $this->db->escape($date) . "' GROUP BY DATE(date_added)");
					if ($query->num_rows){
						$data['customer']['data'][] = array($i, (int)$query->row['total']);
					}else{
						$data['customer']['data'][] = array($i, 0);
					}
					$data['xaxis'][] = array($i, date('D', strtotime($date)));
				}
				break;
			default:
			case 'month':
				for ($i = 1; $i <= date('t'); $i++){
					$date = date('Y') . '-' . date('m') . '-' . $i;
					$query = $this->db->query("SELECT COUNT(*) AS total FROM transaction WHERE shipped_yn = 'Y' AND (DATE(order_date) = '" . $this->db->escape($date) . "') GROUP BY DAY(order_date)");
					if ($query->num_rows){
						$data['order']['data'][] = array($i, (int)$query->row['total']);
					}else{
						$data['order']['data'][] = array($i, 0);
					}	
					$query = $this->db->query("SELECT COUNT(*) AS total FROM user WHERE DATE(date_added) = '" . $this->db->escape($date) . "' GROUP BY DAY(date_added)");
					if ($query->num_rows){
						$data['customer']['data'][] = array($i, (int)$query->row['total']);
					}else{
						$data['customer']['data'][] = array($i, 0);
					}	
					
					$data['xaxis'][] = array($i, date('j', strtotime($date)));
				}
				break;
			case 'year':
				for ($i = 1; $i <= 12; $i++){
					$query = $this->db->query("SELECT COUNT(*) AS total FROM transaction WHERE shipped_yn = 'Y' AND YEAR(order_date) = '" . date('Y') . "' AND MONTH(order_date) = '" . $i . "' GROUP BY MONTH(order_date)");
					
					if ($query->num_rows){
						$data['order']['data'][] = array($i, (int)$query->row['total']);
					}else{
						$data['order']['data'][] = array($i, 0);
					}
					
					$query = $this->db->query("SELECT COUNT(*) AS total FROM user WHERE YEAR(date_added) = '" . date('Y') . "' AND MONTH(date_added) = '" . $i . "' GROUP BY MONTH(date_added)");
					
					if ($query->num_rows){ 
						$data['customer']['data'][] = array($i, (int)$query->row['total']);
					}else{
						$data['customer']['data'][] = array($i, 0);
					}
					
					$data['xaxis'][] = array($i, date('M', mktime(0, 0, 0, $i, 1, date('Y'))));
				}			
				break;	
		} 
		
		$this->load->library('json');
		
		$this->response->setOutput(Json::encode($data));
	}
	
	public function login(){ 
    
		// Iphone auth
		$aMacAuth = array(
			'webapp/inventory',
			'webapp/inventory/getQuantity',
 			'webapp/inventory/updateQuantity',
 			'product/oem',
 			'product/oem/update',
 			'cron/oem',
 			'product/main',
 			'product/main/update',
      'product/main/callUpdatePannel',
 			'product/main/updateThres',
		);
		$route = '';
		if(isset($this->request->get['route'])){
		  $route = $this->request->get['route'];
		}
    if(!in_array($route,$aMacAuth)){
  		if(!$this->user->isLogged()){
  			return $this->forward('common/login');
  		}
    }else{
      // todo!! do macadress authentication here. , besso 201105 
    }
    
		if(isset($this->request->get['route'])){
			$route = '';
			$part = explode('/', $this->request->get['route']);
			
			if (isset($part[0])){
				$route .= $part[0];
			}
			
			if (isset($part[1])){
				$route .= '/' . $part[1];
			}
			
			// ignore login also , besso-201103 
			$ignore = array(
				'common/login',
				'common/logout',
				'error/not_found',
				'error/permission',
				'sales/atc',
				'webapp/inventory',
   			'product/oem',
   			'product/oem/update',
   			'cron/oem',
   			'product/main',
   			'product/main/update',
        'product/main/callUpdatePannel',
        'product/main/updateThres',
			);
			
			$config_ignore = array();
			
			if ($this->config->get('config_token_ignore')){
				$config_ignore = unserialize($this->config->get('config_token_ignore'));
			}
				
			$ignore = array_merge($ignore, $config_ignore);
      //$this->log->aPrint( $ignore ); exit;
      # todo. besso remove all get-driven token from system , besso 201105 
			if(!in_array($route, $ignore)){
				//if (!isset($this->request->get['token']) || !isset($this->session->data['token']) || ($this->request->get['token'] != $this->session->data['token'])){
				if(!isset($this->session->data['token'])){
					return $this->forward('common/login');
				}
			}
		}else{
				if(!isset($this->session->data['token'])){
				  return $this->forward('common/login');
			}
		}
	}
	
	public function permission(){
	  //$this->log->aPrint($this->request->get);
		if (isset($this->request->get['route'])){
			$route = '';
			$part = explode('/', $this->request->get['route']);
			if (isset($part[0])){
				$route .= $part[0];
			}
			if (isset($part[1])){
				$route .= '/' . $part[1];
			}
			
			// all this one ignore permission , besso-201103 
			$ignore = array(
				'common/home',
				'common/login',
				'common/logout',
				'error/not_found',
				'error/permission',	
				'error/token',
				'sales/atc',
				'webapp/inventory',
  			'webapp/inventory/getQuantity',
  			'webapp/inventory/updateQuantity',
   			'product/oem',
   			'product/oem/update',
   			'cron/oem',
   			'cron/cron',
   			'product/main',
   			'product/main/update',
   			'product/main/updateThres',
			);			
						
			if (!in_array($route, $ignore)){
				if (!$this->user->hasPermission('access', $route)){
					return $this->forward('error/permission');
				}
			}
		}
	}
}
?>
